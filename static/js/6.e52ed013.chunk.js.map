{"version":3,"sources":["components/Pages/Players/View/PlayerPlaydayList.tsx","components/Pages/Players/View/PlayerView.tsx"],"names":["React","memo","playdays","length","list","map","_id","name","playday","result","className","key","to","ROUTE_PLAYDAYS","TXT_WIN","TXT_LOSS","compose","connect","state","current","getPlayerCurrentReselect","loading","getPlayerLoadingReselect","getPlayerByHandle","actions","handle","match","params","useEffect","Spinner","image","box","title","TXT_LABEL_BOX","src","alt","width","height"],"mappings":"2LAoCeA,MAAMC,MAxBuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7C,IAAKA,EAASC,OACZ,OAAO,KAGT,IAAMC,EAAOF,EAASG,KAAI,YAAqC,IAAlCC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAC/C,OACE,yBAAKC,UAAU,yCAAyCC,IAAKL,GAC3D,kBAAC,IAAD,CAAMM,GAAE,UAAKC,KAAL,OAAsBL,GAAWE,UAAU,QAChDH,GAEFE,EAAS,GAAK,0BAAMC,UAAU,kCAAkCI,KAChEL,EAAS,GAAK,0BAAMC,UAAU,iCAAiCK,SAKtE,OACE,yBAAKL,UAAU,cACZN,MCyCQY,sBACbC,aANsB,SAACC,GAAD,MAAsB,CAC5CC,QAASC,YAAyBF,GAClCG,QAASC,YAAyBJ,MAIT,CAAEK,kBAAmBC,MADjCR,EAnDsB,SAAC,GAOhC,IALiBS,EAKlB,EALDC,MAASC,OAAUF,OACnBF,EAIC,EAJDA,kBACAJ,EAGC,EAHDA,QACAE,EAEC,EAFDA,QASF,GANAO,qBACE,WACEL,EAAkBE,KAEpB,CAACF,EAAmBE,KAEjBN,EACH,OAAO,KAET,GAAIE,EACF,OAAO,kBAACQ,EAAA,EAAD,MAXN,IAcKtB,EAA+BY,EAA/BZ,KAAMuB,EAAyBX,EAAzBW,MAAOC,EAAkBZ,EAAlBY,IAAK7B,EAAaiB,EAAbjB,SAE1B,OACE,yBAAKQ,UAAU,oBACb,yBAAKA,UAAU,yCACb,4BAAKH,GACL,0BACEG,UAAU,yCACVsB,MAAOC,KAENF,IAIL,yBAAKrB,UAAU,oBACb,yBAAKwB,IAAKJ,EAAOK,IAAK5B,EAAM6B,MAAO,GAAIC,OAAQ,KAE/C,yBAAK3B,UAAU,uBACb,kBAAC,EAAD,CAAmBR,SAAUA","file":"static/js/6.e52ed013.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { ROUTE_PLAYDAYS } from 'const/Routes';\nimport { TXT_LOSS, TXT_WIN } from 'const/Vars';\nimport { IPlayerPlayday } from 'types/interface/IPlayer';\n\ninterface IProps {\n  playdays: IPlayerPlayday[];\n}\n\nconst PlayerPlaydayList: React.FC<IProps> = ({ playdays }) => {\n  if (!playdays.length) {\n    return null;\n  }\n\n  const list = playdays.map(({ _id, name, playday, result }) => {\n    return (\n      <div className=\"list-group-item-action list-group-item\" key={_id}>\n        <Link to={`${ROUTE_PLAYDAYS}${playday}`} className=\"mr-2\">\n          {name}\n        </Link>\n        {result > 0 && <span className=\"badge badge-success badge-pill\">{TXT_WIN}</span>}\n        {result < 0 && <span className=\"badge badge-danger badge-pill\">{TXT_LOSS}</span>}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"list-group\">\n      {list}\n    </div>\n  );\n};\n\nexport default React.memo(PlayerPlaydayList);\n","import React, { useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as actions from 'store/actions/player';\nimport { getPlayerCurrentReselect, getPlayerLoadingReselect } from 'store/selectors/player';\nimport { AppState } from 'store/store';\n\nimport Spinner from 'components/Spinner';\nimport PlayerPlaydayList from './PlayerPlaydayList';\n\nimport { TXT_LABEL_BOX } from 'const/Vars';\nimport IPlayer from 'types/interface/IPlayer';\n\ninterface IProps {\n  match: any;\n  getPlayerByHandle: (handle: string) => void;\n  current: IPlayer | null;\n  loading: boolean;\n}\n\nconst PlayerView: React.FC<IProps> = (\n  {\n    match: { params: { handle } },\n    getPlayerByHandle,\n    current,\n    loading,\n  },\n) => {\n  useEffect(\n    () => {\n      getPlayerByHandle(handle);\n    },\n    [getPlayerByHandle, handle]);\n\n  if (!current) {\n    return null;\n  }\n  if (loading) {\n    return <Spinner/>;\n  }\n\n  const { name, image, box, playdays } = current;\n\n  return (\n    <div className=\"player-view card\">\n      <div className=\"card-header d-flex align-items-center\">\n        <h1>{name}</h1>\n        <span\n          className=\"ml-auto badge-success badge badge-pill\"\n          title={TXT_LABEL_BOX}\n        >\n          {box}\n        </span>\n      </div>\n\n      <div className=\"card-body d-flex\">\n        <img src={image} alt={name} width={80} height={80}/>\n\n        <div className=\"flex-grow-1 ml-md-4\">\n          <PlayerPlaydayList playdays={playdays}/>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  current: getPlayerCurrentReselect(state),\n  loading: getPlayerLoadingReselect(state),\n});\n\nexport default compose(\n  connect(mapStateToProps, { getPlayerByHandle: actions.getPlayerByHandle }),\n)(PlayerView);\n"],"sourceRoot":""}