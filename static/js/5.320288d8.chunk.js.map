{"version":3,"sources":["components/Pages/Players/PostPlayer/PostPlayerForm.tsx","components/Pages/Players/PostPlayer/PostPlayer.tsx"],"names":["React","memo","onSubmit","current","loginFormOptions","useFormik","initialValues","box","damage","handle","image","name","values","validationSchema","Yup","shape","required","TXT_FIELD_REQUIRED","handleSubmit","props","InputField","placeholder","TXT_LABEL_NAME","TXT_LABEL_LOGIN","TXT_LABEL_IMAGE","className","type","label","TXT_LABEL_BOX","value","TXT_LABEL_BOX_1","TXT_LABEL_BOX_2","TXT_LABEL_BOX_3","TXT_LABEL_DAMAGE","Button","wide","TXT_SAVE","mapDispatchToProps","deletePlayer","actions","getCurrentPlayer","postPlayer","resetCurrentPlayer","updatePlayer","compose","connect","state","getPlayerCurrentReselect","loading","getPlayerLoadingReselect","withAuthRedirect","id","match","params","history","useEffect","title","TXT_PAGE_EDIT_PLAYER","TXT_PAGE_ADD_PLAYER","Spinner","formData","onClick","TXT_DELETE"],"mappings":"oNA6EeA,MAAMC,MA9CoB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC9CC,EAAmBC,YAAU,CACjCC,cAAe,CACbC,IAAKJ,EAAUA,EAAQI,IAAM,EAC7BC,SAAQL,GAAUA,EAAQK,OAC1BC,OAAQN,EAAUA,EAAQM,OAAS,GACnCC,MAAOP,EAAUA,EAAQO,MAAQ,GACjCC,KAAMR,EAAUA,EAAQQ,KAAO,IAEjCT,SAAU,SAACU,GACTV,EAASU,IAEXC,iBAAkBC,WAAaC,MAAM,CACnCR,IAAKO,WAAaE,SAASC,KAC3BR,OAAQK,WAAaE,SAASC,KAC9BN,KAAMG,WAAaE,SAASC,SAIxBC,EAA2Bd,EAA3Bc,aAAiBC,EAnByC,YAmB/Bf,EAnB+B,kBAqBlE,OACE,0BAAMF,SAAUgB,GACd,kBAACE,EAAA,EAAD,eAAYC,YAAaC,IAAgBX,KAAK,QAAWQ,IAEzD,kBAACC,EAAA,EAAD,eAAYC,YAAaE,IAAiBZ,KAAK,UAAaQ,IAE5D,kBAACC,EAAA,EAAD,eAAYC,YAAaG,IAAiBb,KAAK,SAAYQ,IAE3D,yBAAKM,UAAU,+BACb,yBAAKA,UAAU,YACb,kBAACL,EAAA,EAAD,eAAYT,KAAK,MAAMe,KAAK,SAASC,MAAOC,KAAmBT,GAC7D,4BAAQU,MAAM,KAAKC,KACnB,4BAAQD,MAAM,KAAKE,KACnB,4BAAQF,MAAM,KAAKG,OAGvB,yBAAKP,UAAU,YACb,kBAACL,EAAA,EAAD,eAAYT,KAAK,SAASe,KAAK,WAAWC,MAAOM,KAAsBd,MAG3E,kBAACe,EAAA,EAAD,CAAQR,KAAM,SAAUS,MAAM,GAAOC,S,SCiBrCC,EAAsB,CAC1BC,aAAcC,IACdC,iBAAkBD,IAClBE,WAAYF,IACZG,mBAAoBH,IACpBI,aAAcJ,KAGDK,sBACbC,aAdsB,SAACC,GAAD,MAAsB,CAC5C3C,QAAS4C,YAAyBD,GAClCE,QAASC,YAAyBH,MAYTT,GACzBa,IAFaN,CAGb5C,IAAMC,MA1E6B,SAAC,GAMhC,IAJiBkD,EAIlB,EAJDC,MAASC,OAAUF,GACnBV,EAGC,EAHDA,WAAYE,EAGX,EAHWA,aAAcL,EAGzB,EAHyBA,aAAcnC,EAGvC,EAHuCA,QACxCqC,EAEC,EAFDA,iBAAkBE,EAEjB,EAFiBA,mBAAoBY,EAErC,EAFqCA,QAASN,EAE9C,EAF8CA,QAGjDO,qBACE,WACMJ,EACFX,EAAiBW,GAEjBT,MAGJ,CAACF,EAAkBE,EAAoBS,IAEzC,IAsBMK,EAAQL,EAAKM,IAAuBC,IAE1C,OAAIV,EACK,kBAACW,EAAA,EAAD,MAIP,yBAAKlC,UAAU,oCACb,4BAAK+B,GAEL,kBAAC,EAAD,CACEtD,SAjCW,SAAC0D,GACXT,EAGHR,EAAaQ,EAAIS,EAAUN,GAF3Bb,EAAWmB,EAAUN,IAgCnBnD,QAASA,IAEX,mBA5BiB,WACnB,OAAKgD,EAIH,0BACE1B,UAAU,2CACVoC,QAAS,kBAAMvB,EAAaa,EAAIG,KAE/BQ,KAPI,OA0BP","file":"static/js/5.320288d8.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport InputField from 'components/Form/InputField';\nimport Button from 'components/general/Button';\n\nimport IPlayer from 'types/interface/IPlayer';\n\nimport {\n  TXT_FIELD_REQUIRED,\n  TXT_LABEL_BOX,\n  TXT_LABEL_BOX_1, TXT_LABEL_BOX_2, TXT_LABEL_BOX_3,\n  TXT_LABEL_DAMAGE,\n  TXT_LABEL_IMAGE, TXT_LABEL_LOGIN,\n  TXT_LABEL_NAME,\n  TXT_SAVE,\n} from 'const/Vars';\n\ninterface IProps {\n  onSubmit: (formData: {\n    name: string;\n    handle: string;\n    image?: string;\n    box?: number;\n    damage?: boolean;\n  }) => void;\n  current: IPlayer;\n}\n\nconst PostPlayerForm: React.FC<IProps> = ({ onSubmit, current }) => {\n  const loginFormOptions = useFormik({\n    initialValues: {\n      box: current ? current.box : 1,\n      damage: current ? current.damage : false,\n      handle: current ? current.handle : '',\n      image: current ? current.image : '',\n      name: current ? current.name : '',\n    },\n    onSubmit: (values) => {\n      onSubmit(values);\n    },\n    validationSchema: Yup.object().shape({\n      box: Yup.string().required(TXT_FIELD_REQUIRED),\n      handle: Yup.string().required(TXT_FIELD_REQUIRED),\n      name: Yup.string().required(TXT_FIELD_REQUIRED),\n    }),\n  });\n\n  const { handleSubmit, ...props } = loginFormOptions;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputField placeholder={TXT_LABEL_NAME} name=\"name\" {...props} />\n\n      <InputField placeholder={TXT_LABEL_LOGIN} name=\"handle\" {...props} />\n\n      <InputField placeholder={TXT_LABEL_IMAGE} name=\"image\" {...props} />\n\n      <div className=\"row align-items-center mb-3\">\n        <div className=\"col-md-6\">\n          <InputField name=\"box\" type=\"select\" label={TXT_LABEL_BOX} {...props}>\n            <option value=\"1\">{TXT_LABEL_BOX_1}</option>\n            <option value=\"2\">{TXT_LABEL_BOX_2}</option>\n            <option value=\"3\">{TXT_LABEL_BOX_3}</option>\n          </InputField>\n        </div>\n        <div className=\"col-md-6\">\n          <InputField name=\"damage\" type=\"checkbox\" label={TXT_LABEL_DAMAGE} {...props} />\n        </div>\n      </div>\n      <Button type={'submit'} wide={true}>{TXT_SAVE}</Button>\n    </form>\n  );\n};\n\nexport default React.memo(PostPlayerForm);\n","import React, { useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as actions from 'store/actions/player';\nimport { getPlayerCurrentReselect, getPlayerLoadingReselect } from 'store/selectors/player';\nimport { AppState } from 'store/store';\n\nimport Spinner from 'components/Spinner';\nimport PostPlayerForm from './PostPlayerForm';\n\nimport { TXT_DELETE, TXT_PAGE_ADD_PLAYER, TXT_PAGE_EDIT_PLAYER } from 'const/Vars';\nimport withAuthRedirect from 'hoc/withAuthRedirect';\n\ninterface IProps {\n  history: any;\n  postPlayer: (formData: any, history: any) => void;\n  updatePlayer: (id: string, formData: any, history: any) => void;\n  deletePlayer: (id: string, history: any) => void;\n  current: any;\n  getCurrentPlayer: (id: string) => void;\n  resetCurrentPlayer: () => void;\n  match: any;\n  loading?: boolean;\n}\n\nconst PostPlayer: React.FC<IProps> = (\n  {\n    match: { params: { id } },\n    postPlayer, updatePlayer, deletePlayer, current,\n    getCurrentPlayer, resetCurrentPlayer, history, loading,\n  },\n) => {\n  useEffect(\n    () => {\n      if (id) {\n        getCurrentPlayer(id);\n      } else {\n        resetCurrentPlayer();\n      }\n    },\n    [getCurrentPlayer, resetCurrentPlayer, id]);\n\n  const onSubmit = (formData: any) => {\n    if (!id) {\n      postPlayer(formData, history);\n    } else {\n      updatePlayer(id, formData, history);\n    }\n  };\n\n  const DeleteButton = () => {\n    if (!id) {\n      return null;\n    }\n    return (\n      <span\n        className=\"btn btn-sm btn-outline-danger w-100 mt-4\"\n        onClick={() => deletePlayer(id, history)}\n      >\n        {TXT_DELETE}\n      </span>\n    );\n  };\n\n  const title = id ? TXT_PAGE_EDIT_PLAYER : TXT_PAGE_ADD_PLAYER;\n\n  if (loading) {\n    return <Spinner/>;\n  }\n\n  return (\n    <div className=\"post-player-page col-md-6 m-auto\">\n      <h1>{title}</h1>\n\n      <PostPlayerForm\n        onSubmit={onSubmit}\n        current={current}\n      />\n      <DeleteButton/>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  current: getPlayerCurrentReselect(state),\n  loading: getPlayerLoadingReselect(state),\n});\n\nconst mapDispatchToProps = ({\n  deletePlayer: actions.deletePlayer,\n  getCurrentPlayer: actions.getCurrentPlayer,\n  postPlayer: actions.postPlayer,\n  resetCurrentPlayer: actions.resetCurrentPlayer,\n  updatePlayer: actions.updatePlayer,\n});\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect,\n)(React.memo(PostPlayer));\n"],"sourceRoot":""}